local lfs = require('lfs')
local F = require('F')

lfs.chdir('/home/marcel/.config/conky')

require('helpers')
local config = require('config')('/home/marcel/.config/conky/env')

conky.config = {
  alignment = 'top_right',
  background = false,
  border_width = 1,
  cpu_avg_samples = 2,
  default_color = 'white',
  draw_borders = false,
  draw_graph_borders = true,
  draw_outline = false,
  draw_shades = false,
  use_xft = true,
  font = 'Fira Mono:size=11',
  gap_x = 30,
  gap_y = 30,
  border_inner_margin = 20,
  net_avg_samples = 2,
  no_buffers = true,
  out_to_console = false,
  out_to_stderr = false,
  extra_newline = false,
  own_window = true,
  own_window_class = Conky,
  own_window_argb_visual = true,
  own_window_argb_value = 200,
  own_window_hints = 'undecorated,below,sticky,skip_taskbar,skip_pager',
  stippled_borders = 0,
  update_interval = 1,
  uppercase = false,
  use_spacer = 'none',
  show_graph_scale = false,
  show_graph_range = false,
  draw_graph_borders = false,
  text_buffer_size = 1024,
  double_buffer = true,
  lua_load = '/home/marcel/.config/conky/system.lua',
}

white = '${color}'
gray = '${color grey}'

local bigspace = 5
local smallspace = 10
space = {}
space.big = 0
space.small = 18
function offset(space)
  local value = F "${voffset -%{space}}"
  return value
end

local sections = {}


--
-- Info
--

table.insert(sections, F [[
${voffset -20}
${alignc}Info
${voffset -8}$hr${voffset 10}
${color grey}Date:$color ${time %A %B %e, %l:%M:%S %p}
${color grey}Hostname:$color $nodename $alignr ${color grey}Kernel:$color $kernel
${color grey}Uptime:$color $uptime$alignr ${color grey}Outdated packages:$color ${execi 300 (pacman -Qu; pacaur -k) | wc -l}
%{offset(space.big)}
]])


--
-- Weather
--

table.insert(sections, F [[
${alignc}Weather
${voffset -8}$hr${voffset 10}
${execpi 300 python /home/marcel/.config/conky/parseWeather.py}
%{offset(space.small)}
]])


--
-- CPU
--

local function sensors(match_string, index)
  if config.SENSORS ~= 'true' then return '' end

  parts = match_string:split(" ")
  local string = F "| ${execi 5 sensors | awk '$1 == \"%{parts[1]}\" && $2 == \"%{parts[2]}\" { c=$%{index}; gsub(\"[+°C]\", \"\", c); print c }' } °C"
  return string
end

local function cpu_section(core)
  local name = core + 1
  return F '%{gray}Core %{name}: ${cpubar cpu%{name} 6, 365}\n$alignr$color [ ${cpu cpu %{name}} % ' .. sensors(F "Core %{core}:", 3) .. ' ]'
end

local cpu_sections = {}

for i = 0,3 do
  table.insert(cpu_sections, cpu_section(i))
end

cpu = output_of([[cat /proc/cpuinfo | grep -m 1 'model name' | sed -e 's/\(model name.*: \| Eight-Core Processor\|(tm)\|(r)\|CPU.*\)//gi']])

table.insert(sections, F [[
${alignc}${color}CPU
${voffset -8}$hr${voffset 10}
${color grey}CPU:$color %{cpu}$alignr [ $freq_g GHz %{sensors("Package id", 4)} ]
${voffset -12}
%{table.concat(cpu_sections, '\n')}
${voffset -10}
${color grey}${top name 1} ${alignr}${color}${top cpu 1} %
${color grey}${top name 2} ${alignr}${color}${top cpu 2} %
${color grey}${top name 3} ${alignr}${color}${top cpu 3} %
${color grey}${top name 4} ${alignr}${color}${top cpu 4} %
%{offset(space.small)}
]])


--
-- GPU
--

gpu = output_of([[nvidia-smi -q | grep "Product Name" | sed "s/.*Product Name.*\: //"]])

table.insert(sections, F [[
${alignc}${color}GPU
${voffset -8}$hr${voffset 10}
${color grey}GPU: ${color}%{gpu}${alignr} [ ${execi 5 nvidia-smi -q -d clock | awk '$1 == "Graphics" { print $3 " " $4 }' | head -n 1} | ${execi 5 nvidia-smi -q -d temperature | awk '$2 == "Current" { print $5 }'} °C ]
${voffset -12}
${execbar nvidia-smi -q -d utilization | awk '$1 == "Gpu" { print $3}'}
%{offset(space.big)}
]])


--
-- RAM
--

table.insert(sections, F [[
${alignc}RAM
${voffset -8}$hr${voffset 10}
${color grey}RAM:$color ${membar 6}
$alignr ${color grey}$mem / $memmax$color [ $memperc% ]
${color grey}Swap:$color ${swapbar 6}
$alignr ${color grey}$swap / $swapmax$color [ $swapperc% ]
${voffset -12}
${color grey}${top_mem name 1} ${alignr}${color}${lua top_mem 1}
${color grey}${top_mem name 2} ${alignr}${color}${lua top_mem 2}
${color grey}${top_mem name 3} ${alignr}${color}${lua top_mem 3}
${color grey}${top_mem name 4} ${alignr}${color}${lua top_mem 4}
%{offset(space.small)}
]])


--
-- Drives
--

table.insert(sections, F [[
${alignc}Drives
${voffset -8}$hr${voffset 10}
${color grey}/$color ${fs_bar 6 /}
$alignr${color grey}${fs_used /} / ${fs_size /}$color [ ${fs_used_perc /}% ]
%{offset(space.big)}
]])


--
-- Network
--

table.insert(sections, F [[
${alignc}Network
${voffset -8}$hr${voffset 10}
${color grey}Down: $color ${lua network downspeedf %{config.INTERFACE}} $alignr${color grey} Up: $color${lua network upspeedf %{config.INTERFACE}}
$color ${downspeedgraph %{config.INTERFACE} 30,150 black white -t}$alignr${upspeedgraph %{config.INTERFACE} 30,150 grey white}
]])

conky.text = table.concat(sections, '') .. "${voffset -40}                                                "
