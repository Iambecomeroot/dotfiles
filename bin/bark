#!/usr/bin/env python

import sys
import os
from os import path
from datetime import datetime
import subprocess
import shutil

import sh
import click
from click_default_group import DefaultGroup
from slugify import slugify
import notify2


LOG_DIR = path.expanduser("~/.cache/bark")
NOTIFICATION_SUMMARY = 'Bark!'
NOTIFICATION_MESSAGE = '"{name}" closed unexpectedly'
NOTIFICATION_MESSAGE_RETRY = NOTIFICATION_MESSAGE + ' Trying to re-launch...'
NOTIFICATION_ICON = 'dialog-warning'


def timestamp():
    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')


def show_notification(notification, name, number_tries, retries):

    if not notification:
        notify2.init('Bark!')
        notification = notify2.Notification(
            NOTIFICATION_SUMMARY,
            NOTIFICATION_MESSAGE_RETRY.format(name=name)
            if number_tries < retries else
            NOTIFICATION_MESSAGE.format(name=name),
            NOTIFICATION_ICON,
        )

    notification.update(
        NOTIFICATION_SUMMARY,
        NOTIFICATION_MESSAGE_RETRY.format(name=name)
        if number_tries < retries else
        NOTIFICATION_MESSAGE.format(name=name),
        NOTIFICATION_ICON,
    )
    notification.set_timeout(notify2.EXPIRES_NEVER)
    notification.show()

    return notification


class Color:
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    DARKCYAN = '\033[36m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'


@click.group(cls=DefaultGroup, default='bark', default_if_no_args=True)
def cli():
    pass


@cli.command(context_settings=dict(
    ignore_unknown_options=True,
))
@click.option('--retries', default=2)
@click.argument('name')
@click.argument('cmd', nargs=-1, type=click.UNPROCESSED)
def bark(retries, name, cmd):

    if not cmd:
        if shutil.which(name):
            cmd = (name,)

        else:
            click.echo('Error: no command given', err=True)
            sys.exit(1)

    log_file = path.join(LOG_DIR, f'{slugify(name)}.log')
    os.makedirs(path.dirname(log_file), exist_ok=True)

    def worker(number_tries=0, notification=None):
        if number_tries > retries:
            return

        with open(log_file, 'a') as f:
            process = subprocess.Popen(
                cmd,
                stderr=subprocess.STDOUT,
                stdout=subprocess.PIPE,
            )

            f.write(f'{timestamp()} {Color.BOLD}Started: {name}{Color.END}\n')

            try:
                for line in iter(process.stdout.readline, b''):
                    f.write(f'{timestamp()} {line.decode(sys.stdout.encoding)}')

            finally:
                f.write(
                    f'{timestamp()} {Color.BOLD}Stopped: {name}{Color.END}\n')

                notification = show_notification(
                    notification=notification,
                    name=name,
                    number_tries=number_tries,
                    retries=retries,
                )

            worker(number_tries=number_tries + 1, notification=notification)

    worker()


@cli.command(context_settings=dict(
    ignore_unknown_options=True,
))
@click.argument('name')
@click.argument('rest', nargs=-1, type=click.UNPROCESSED)
def logs(name, rest):
    log_file = path.join(LOG_DIR, f'{slugify(name)}.log')

    for line in sh.tail(*rest, log_file, _iter=True):
        click.echo_via_pager(line.rstrip())


if __name__ == '__main__':
    cli()
