"
" Plugins
"

call plug#begin('~/.vim/plugged')


"
" Additional functionality
"

" Add more targets
Plug 'wellle/targets.vim'

" Tree view
Plug 'scrooloose/nerdtree'
Plug 'robinfehr/nerdtree-git-plugin'

" Better history
Plug 'mbbill/undotree'

" Fuzzy file finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Status bar
Plug 'vim-airline/vim-airline'

" Enable dot repetition for plugins
Plug 'tpope/vim-repeat'

" Surround blocks with characters
Plug 'tpope/vim-surround'

" Pairs of handy pairs mappings
" Good for moving lines and such
Plug 'tpope/vim-unimpaired'

" Git
Plug 'tpope/vim-fugitive'


"
" Convenience
"

" Open files in last place
Plug 'farmergreg/vim-lastplace'

" Snippet engine
Plug 'SirVer/ultisnips'

" Toggle comments
Plug 'scrooloose/nerdcommenter'

" Emmet
Plug 'mattn/emmet-vim'

" Linting
Plug 'w0rp/ale'

Plug 'tranvansang/vim-close-pair'
" Plug 'Raimondi/delimitMate'

Plug 'Valloric/YouCompleteMe'


"
" Appearance
"

" Colourscheme
Plug 'dylanaraps/wal'

" File icons
Plug 'ryanoasis/vim-devicons'

" Indent guides
Plug 'Yggdroot/indentLine'

" Automatically remove search highlighting
Plug 'haya14busa/incsearch.vim'

" Syntax plugins
Plug 'pangloss/vim-javascript'
Plug 'mustache/vim-mustache-handlebars'
Plug 'digitaltoad/vim-pug'
Plug 'elzr/vim-json'
Plug 'plasticboy/vim-markdown'


"
" Fun stuff
"

" Gotta watch out for trolls
" Plug 'vim-utils/vim-troll-stopper'

call plug#end()


"
" General settings
"

" Use space as leader
let mapleader = " "

" No need for vi compatibility
set nocompatible

" Scroll with mousewheel
set mouse=a

filetype plugin indent on


"
" Appearance
"

" Syntax highlighting
syntax on

" Start scrolling 10 lines before the horizontal window border
set scrolloff=10

" Break on words not on characters
set formatoptions=l
set lbr

" Show (certain) invisibles
set listchars=trail:·

" Show trailing whitespace
match Todo /\s\+$/

" Indentation
set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab

" Line numbers
set relativenumber
set nu

" Encoding and font
set encoding=utf-8
set guifont=Source\ Code\ Pro\ 12

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

let g:vim_markdown_conceal = 0


"
" Navigation
"

" Quick pane cycling
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


"
" Search
"

" Highlight results
set hlsearch

" Automatically hide results
let g:incsearch#auto_nohlsearch = 1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Underline search results
let g:incsearch#highlight = {
\   'match' : {
\     'group' : 'IncSearchUnderline',
\     'priority' : '10'
\   },
\   'on_cursor' : {
\     'priority' : '100'
\   },
\   'cursor' : {
\     'group' : 'Search',
\     'priority' : '1000'
\   }
\ }

" Prefer case sensitive matches but allow both
set ignorecase
set smartcase
nnoremap <leader>/ :nohl<CR>


"
" Buffers
"

" Allow buffers in background
set hidden

" Buffer cycling
nnoremap { :bp<CR>
nnoremap } :bn<CR>

" Go to most recent buffer
nnoremap <leader><leader> :e #<CR>

" Go to nth buffer
let c = 1
while c <= 99
  execute "nnoremap " . c . "<leader> :" . c . "b\<CR>"
  let c += 1
endwhile

" Shortcut to close only current buffer
nnoremap <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>

" Automatically update files
set autoread

" Autoread sucks, read on BufEnter
au FocusGained,BufEnter * :silent! !

" To avoid conflicts, write on focus lost
au FocusLost,WinLeave * :silent! w


"
" Typing
"

function! RepeatChar(char, count)
  return repeat(a:char, a:count)
endfunction

" Empty line but don't delete it
nnoremap <leader>dd 0d$

nnoremap s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
nnoremap S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>

inoremap <C-W> {<CR><end><CR>}


"
" Spelling
"

autocmd FileType markdown,gitcommit setlocal spell

" Autocomplete words when spell is set
set complete+=kspell


"
" Autocomplete
"

let g:ycm_autoclose_preview_window_after_insertion = 1


""""""""""""""""""""""
"  Plugins settings  "
""""""""""""""""""""""


"
" Ale
"

nmap <silent> <leader>k <Plug>(ale_previous_wrap)
nmap <silent> <leader>j <Plug>(ale_next_wrap)

let g:ale_fixers = {
\ 'javascript': [
\   'eslint',
\ ],
\}

nnoremap <leader>f :ALEFix<CR>


"
" Airline
"

" Show by default
set laststatus=2

" Use powerline fonts
let g:airline_powerline_fonts = 1

" Supposed to make leaving insert mode faster
set ttimeoutlen=50

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" Hide things that are broken with my fonts or that I don't like the look of
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.linenr = ''

" Hide default status bar
set shortmess+=F

" Show tabline
let g:airline#extensions#tabline#enabled = 1

" Don't collapse filename
" let g:airline#extensions#tabline#fnamecollapse = 0

" Show buffer numbers in tabline
let g:airline#extensions#tabline#buffer_nr_show = 1

" Remove colon after buffer number
let g:airline#extensions#tabline#buffer_nr_format = '%s '


"
" NERDTree
"

" Automatically open when starting vim on directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Close NERDTree if it's the only thing left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Keybinding to open NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>

" Show hidden files
let NERDTreeShowHidden = 1

" Use colours not flags
let g:NERDTreeGitStatusNodeColorization = 1
let g:NERDTreeGitStatusWithFlags = 0

" Show files matching .gitignore
let g:NERDTreeShowIgnoredStatus = 1

" Files to be hidden
let NERDTreeIgnore = ['\.git$', '\.pioenvs$', '\.swp']

" Folders
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

" Use pretty icons
let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '

" Prevent brackets around icons when sourcing vimrc
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif


"
" FZF
"

nnoremap <C-p> :FZF<CR>


"
" Syntastic
"

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exe = 'eslint --ignore-path ~/.eslintignore .'


"
" Snippets
"

let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsSnippetsDir = '~/.vim/snippets'

let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'


"
" Wal
"

" Colourscheme settings
colorscheme wal


"
" Indent line
"

" Don't remove quotes from json
let g:vim_json_syntax_conceal = 0

" Enable leading spaces
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'

" Exclude NERDTree
let g:indentLine_bufNameExclude = ['_.*', 'NERD_tree.*']


"
" Emmet
"

let g:user_emmet_expandabbr_key = "<s-tab>"


"
" NERDCommenter
"

let g:NERDSpaceDelims = 1

map <C-_> <Plug>NERDCommenterToggle
imap <C-_> <Plug>NERDCommenterInsert


"
" CtrlP
"

let g:ctrlp_cmd = 'CtrlPMixed'

