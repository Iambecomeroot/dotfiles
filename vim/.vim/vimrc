"
" General settings
"

" Use space as leader
let mapleader = " "

" Indentation
set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab

" Show (certain) invisibles
set listchars=space:·

" No need for vi compatability
set nocompatible

" Encoding and font
set encoding=utf-8
set guifont=Source\ Code\ Pro\ 12

" Line numbers
set relativenumber

" Syntax highlighting
syntax on

" Start scrolling 10 lines before the horizontal window border
set scrolloff=10

" Scroll with mousewheel
set mouse=a

" Allow buffers in background
set hidden

filetype plugin indent on

" Automatically change working directory to autocomplete files relative to id
" set autochdir


"
" Navigation
"

" Quick pane cycling
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Buffer cycling
nnoremap { :bp<CR>
nnoremap } :bn<CR>

" Go to most recent buffer
nnoremap ` :e #<CR>

" Go to nth buffer
nnoremap <leader>1 :b 1<CR>
nnoremap <leader>2 :b 2<CR>
nnoremap <leader>3 :b 3<CR>
nnoremap <leader>4 :b 4<CR>
nnoremap <leader>5 :b 5<CR>
nnoremap <leader>6 :b 6<CR>
nnoremap <leader>7 :b 7<CR>
nnoremap <leader>8 :b 8<CR>
nnoremap <leader>9 :b 9<CR>
nnoremap <leader>0 :b 10<CR>


"
" File handling
"

" Shortcut to close only current buffer
map <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>


"
" Typing
"

function! RepeatChar(char, count)
  return repeat(a:char, a:count)
endfunction


nnoremap s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
nnoremap S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>

if (&tildeop)
  nmap gcw guw~l
  nmap gcW guW~l
  nmap gciw guiw~l
  nmap gciW guiW~l
  nmap gcis guis~l
  nmap gc$ gu$~l
  nmap gcgc guu~l
  nmap gcc guu~l
  vmap gc gu~l
else
  nmap gcw guw~h
  nmap gcW guW~h
  nmap gciw guiw~h
  nmap gciW guiW~h
  nmap gcis guis~h
  nmap gc$ gu$~h
  nmap gcgc guu~h
  nmap gcc guu~h
  vmap gc gu~h
endif


"
" Autocomplete
"

set complete+=kspell

"
" Plugins
"

call plug#begin('~/.vim/plugged')


" 
" Tim Pope plugins
" 

" Enable dot repetition for plugins
Plug 'tpope/vim-repeat'

" Surround blocks with characters
Plug 'tpope/vim-surround'

" Pairs of handy backet mappins
" Good for moving lines and such
Plug 'tpope/vim-unimpaired'

" Tree view
Plug 'scrooloose/nerdtree'
" Plug 'Xuyuanp/nerdtree-git-plugin' " Commented until it's colours not icons

" Fuzzy file finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Status bar
Plug 'vim-airline/vim-airline'

" Snippet engine
Plug 'SirVer/ultisnips'

" Colourscheme
Plug 'dylanaraps/wal'

" Open files in last place
Plug 'farmergreg/vim-lastplace'

" File icons
Plug 'ryanoasis/vim-devicons'

" Indent guides
Plug 'Yggdroot/indentLine'

" Toggle comments
Plug 'scrooloose/nerdcommenter'

" Emmet
Plug 'mattn/emmet-vim'

" Syntax plugins
Plug 'pangloss/vim-javascript'
Plug 'mustache/vim-mustache-handlebars'
Plug 'digitaltoad/vim-pug'

" Linting
Plug 'vim-syntastic/syntastic'

Plug 'suan/vim-instant-markdown'

call plug#end()



"
" Airline 
"

" Show by default
set laststatus=2

" Use powerline fonts
let g:airline_powerline_fonts = 1

" Supposed to make leaving insert mode faster
set ttimeoutlen=50

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" Hide things that are broken with my fonts or that I don't like the look of
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.linenr = ''

" Hide default status bar
set shortmess+=F

" Show tabline
let g:airline#extensions#tabline#enabled = 1

" Don't collapse filename
let g:airline#extensions#tabline#fnamecollapse = 0

" Show buffer numbers in tabline
let g:airline#extensions#tabline#buffer_nr_show = 1

" Remove comma after buffer number
let g:airline#extensions#tabline#buffer_nr_format = '%s '


"
" NERDTree
"

" Automatically open when starting vim on directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Close NERDTree if it's the only thing left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Keybinding to open NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>

" Show hidden files
let NERDTreeShowHidden=1

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "",
    \ "Staged"    : "✚",
    \ "Untracked" : "",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : " ",
    \ "Dirty"     : "",
    \ "Clean"     : "",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
let g:NERDTreeShowIgnoredStatus = 1

" Files to be hidden
let NERDTreeIgnore=['\.git$', '\.pioenvs$', '\.swp']

" Folders
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

" Use pretty icons
let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '

" Prevent brackets around icons when sourcing vimrc
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif


" 
" FZF
"

nnoremap <C-p> :FZF<CR>


" 
" Syntastic
" 

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = 'eslint --ignore-path ~/.eslintignore .'


" 
" Snippets
" 

let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsSnippetsDir = '~/.vim/snippets'


"
" Wal
"

" Colourscheme settings
colorscheme wal


"
" Indent line
"

let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_bufNameExclude = ['_.*', 'NERD_tree.*']


"
" Emmet
"

let g:user_emmet_expandabbr_key = "<s-tab>"


"
" NERDCommenter
"

let g:NERDSpaceDelims = 1

map <C-_> <Plug>NERDCommenterToggle
imap <C-_> <Plug>NERDCommenterInsert


"
" CtrlP
"

let g:ctrlp_cmd = 'CtrlPMixed'

