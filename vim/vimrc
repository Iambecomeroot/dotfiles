"
" Plugins
"

" vim-plug directory for vim
if filereadable($HOME . '/.vim/autoload/plug.vim')
	let plugged_dir = $HOME . '/.vim/plugged'
endif

" vim-plug directory for nvim
if filereadable($XDG_CONFIG_HOME . '/nvim/autoload/plug.vim')
	let plugged_dir = $XDG_CONFIG_HOME . '/nvim/plugged'
endif

if exists('plugged_dir')
	call plug#begin(plugged_dir)

		"
		" Additional functionality
		"

		Plug 'tpope/vim-dadbod'
		Plug 'tpope/vim-dotenv'
		Plug 'tpope/vim-commentary'
		Plug 'tpope/vim-ragtag'
		" Helpers for UNIX
		Plug 'tpope/vim-eunuch'

		" tags file management
		Plug 'ludovicchabant/vim-gutentags'

		" Add more targets
		Plug 'wellle/targets.vim'

		" Tree view
		Plug 'scrooloose/nerdtree', { 'on': [ 'NERDTree', 'NERDTreeToggle', 'NERDTreeFind' ] }
		" Plug 'Xuyuanp/nerdtree-git-plugin'
		" Plug 'tsony-tsonev/nerdtree-git-plugin'
		" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

		" Better history
		Plug 'mbbill/undotree'

		" Fuzzy file finder
		Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
		Plug 'junegunn/fzf.vim'

		Plug 'wincent/ferret'

		" Enable dot repetition for plugins
		Plug 'tpope/vim-repeat'

		" Surround blocks with characters
		Plug 'tpope/vim-surround'

		" Pairs of handy pairs mappings
		" Good for moving lines and such
		Plug 'tpope/vim-unimpaired'

		" Git
		Plug 'tpope/vim-fugitive'
		Plug 'tpope/vim-rhubarb'
		Plug 'shumphrey/fugitive-gitlab.vim'
		Plug 'airblade/vim-gitgutter'

		" Save session
		Plug 'tpope/vim-obsession'

		" Compare when vim finds a swap file
		Plug 'chrisbra/Recover.vim'

		" Word and case variants
		Plug 'tpope/tpope-vim-abolish'

		Plug 'metakirby5/codi.vim'

		Plug 'rickhowe/diffchar.vim'

		" Vimscript test suite
		Plug 'junegunn/vader.vim'

		"
		" Convenience
		"

		" Open files in last place
		Plug 'farmergreg/vim-lastplace'

		" Snippet engine
		Plug 'SirVer/ultisnips'

		" Emmet
		Plug 'mattn/emmet-vim'

		" Linting
		Plug 'w0rp/ale'

		Plug 'tpope/vim-ragtag'

		" Plug 'Valloric/YouCompleteMe', { 'do': 'python install.py --js-completer --clang-completer' }
		if has('nvim')
			Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
		else
			Plug 'Shougo/deoplete.nvim'
			Plug 'roxma/nvim-yarp'
			Plug 'roxma/vim-hug-neovim-rpc'
		endif

		" Switch between single line and multi line statemnts
		Plug 'AndrewRadev/splitjoin.vim'

		" Spelling and grammar checking
		Plug 'rhysd/vim-grammarous'

		Plug 'airblade/vim-accent'

		"
		" Inconvinience
		"

		Plug 'takac/vim-hardtime'

		"
		" Appearance
		"

		" Status bar
		Plug 'vim-airline/vim-airline'

		" Colourscheme
		Plug 'Iambecomeroot/wal.vim'

		" File icons
		Plug 'ryanoasis/vim-devicons'

		" Indent guides
		Plug 'Yggdroot/indentLine'

		" Automatically remove search highlighting
		Plug 'haya14busa/incsearch.vim'

		Plug 'chrisbra/Colorizer'

		" Colour manipulation
		Plug 'romgrk/lib.kom'

		" Syntax plugins
		Plug 'pangloss/vim-javascript'
		Plug 'Galooshi/vim-import-js'

		Plug 'mxw/vim-jsx'
		Plug 'mustache/vim-mustache-handlebars'
		Plug 'digitaltoad/vim-pug'
		Plug 'elzr/vim-json'
		Plug 'plasticboy/vim-markdown'
		Plug 'heavenshell/vim-jsdoc'
		Plug 'lervag/vimtex'
		" Plug 'python-mode/python-mode', { 'branch': 'develop' }
		Plug 'statico/vim-javascript-sql'
		Plug 'Vimjas/vim-python-pep8-indent'
		" Plug 'hdima/python-syntax'
		" Plug 'Rykka/riv.vim'
		" Plug 'nvie/vim-flake8'
		Plug 'Matt-Deacalion/vim-systemd-syntax'

	call plug#end()
endif

let g:riv_python_rst_hl=1


"
" General settings
"

" Use space as leader
let mapleader = " "

" Scroll with mousewheel
set mouse=a

filetype plugin indent on

" Use global swap file
" Then use `vim -L` for list of open files
if !isdirectory($HOME . "/.vim/swap")
	call mkdir($HOME . "/.vim/swap", "p")
endif
set directory=~/.vim/swap

" Maintain undo history between sessions
if !isdirectory($HOME . "/.vim/undodir")
	call mkdir($HOME . "/.vim/undodir", "p")
endif
set undofile
set undodir=~/.vim/undodir

" Open new splits on right
set splitright


"
" Appearance
"

set fileformats=unix

" Syntax highlighting
syntax on

" Start scrolling 10 lines before the horizontal window border
set scrolloff=10

" Break on words not on characters
set formatoptions=l
set linebreak

" Show (certain) invisibles
set list
set listchars=trail:·,tab:\│\ ,

" Indentation
set tabstop=2 softtabstop=2 shiftwidth=2 smarttab
set autoindent
set copyindent
set preserveindent

" Indent with tabs, align with spaces
" I am agaisnt lining up code as this creates unecessary changes when diffing,
" but it is needed for comment blocks with a single leading space
" set cindent
" set cinoptions=(0,u0,U0
set cinoptions=l1

autocmd Filetype python setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab

" Line numbers
set number
set relativenumber

" Encoding and font
set encoding=utf-8
set guifont=Source\ Code\ Pro\ 12

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

let g:vim_markdown_conceal = 0

" Show trailing whitespace
match Todo /\s\+$/

" No folding
set nofoldenable

" Highlight characters that go over line length limit
augroup vimrc_autocmds
	" autocmd BufEnter *.js highlight OverLength ctermbg=grey
	" autocmd BufEnter *.js match OverLength /\%82v.*/
augroup END




"
" Search
"

" Highlight results
set hlsearch

" Automatically hide results
let g:incsearch#auto_nohlsearch = 1
map /	<Plug>(incsearch-forward)
map ?	<Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n	<Plug>(incsearch-nohl-n)
map N	<Plug>(incsearch-nohl-N)
map *	<Plug>(incsearch-nohl-*)
map #	<Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Underline search results
let g:incsearch#highlight = {
\	 'match' : {
\		 'group' : 'IncSearchUnderline',
\		 'priority' : '10'
\	 },
\	 'on_cursor' : {
\		 'priority' : '100'
\	 },
\	 'cursor' : {
\		 'group' : 'Search',
\		 'priority' : '1000'
\	 }
\ }

" Prefer case sensitive matches but allow both
set ignorecase
set smartcase
nnoremap <leader>/ :nohl<CR>


"
" Buffers
"

" Allow buffers in background
set hidden

" Go to nth buffer
let c = 1
while c <= 999
	execute "nnoremap " . c . "<leader> :" . c . "b\<CR>"
	let c += 1
endwhile

" Automatically update files
set autoread

" Disable syntax highlighting for large files
autocmd BufWinEnter * if line2byte(line("$") + 1) > 1000000 | syntax clear | endif

function! RepeatChar(char, count)
	return repeat(a:char, a:count)
endfunction


nnoremap s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
nnoremap S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>

" Continue comments on next line when max length is reached
set textwidth=79

if executable('par')
	set equalprg=par
endif
set formatoptions+=c


"
" Spelling
"

augroup spelling
	autocmd FileType markdown,gitcommit setlocal spell
augroup END

" Autocomplete words when spell is set
set complete+=kspell

let g:javascript_plugin_jsdoc = 1
" Supposed to make leaving insert mode faster
set ttimeoutlen=50

" Always show status line
set laststatus=2

" Hide default status bar
set shortmess+=F

" Colourscheme settings
silent! colorscheme wal

" Don't remove quotes from json
let g:vim_json_syntax_conceal = 0

let g:NERDSpaceDelims = 1

set conceallevel=0
