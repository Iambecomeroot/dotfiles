"
" Plugins
"

" vim-plug directory for vim
if filereadable($HOME . '/.vim/autoload/plug.vim')
	let plugged_dir = $HOME . '/.vim/plugged'
endif

" vim-plug directory for nvim
if filereadable($XDG_CONFIG_HOME . '/nvim/autoload/plug.vim')
	let plugged_dir = $XDG_CONFIG_HOME . '/nvim/plugged'
endif

if exists('plugged_dir')
	call plug#begin(plugged_dir)

		"
		" Additional functionality
		"

		Plug 'tpope/vim-dadbod'
		Plug 'tpope/vim-dotenv'
		Plug 'tpope/vim-commentary'
		Plug 'tpope/vim-ragtag'
		" Helpers for UNIX
		Plug 'tpope/vim-eunuch'

		" tags file management
		Plug 'ludovicchabant/vim-gutentags'

		" Add more targets
		Plug 'wellle/targets.vim'

		" Tree view
		Plug 'scrooloose/nerdtree', { 'on': [ 'NERDTree', 'NERDTreeToggle', 'NERDTreeFind' ] }
		" Plug 'Xuyuanp/nerdtree-git-plugin'
		" Plug 'tsony-tsonev/nerdtree-git-plugin'
		" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

		" Better history
		Plug 'mbbill/undotree'

		" Fuzzy file finder
		Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
		Plug 'junegunn/fzf.vim'

		Plug 'wincent/ferret'

		" Enable dot repetition for plugins
		Plug 'tpope/vim-repeat'

		" Surround blocks with characters
		Plug 'tpope/vim-surround'

		" Pairs of handy pairs mappings
		" Good for moving lines and such
		Plug 'tpope/vim-unimpaired'

		" Git
		Plug 'tpope/vim-fugitive'
		Plug 'tpope/vim-rhubarb'
		Plug 'shumphrey/fugitive-gitlab.vim'
		Plug 'airblade/vim-gitgutter'

		" Save session
		Plug 'tpope/vim-obsession'

		" Compare when vim finds a swap file
		Plug 'chrisbra/Recover.vim'

		" Word and case variants
		Plug 'tpope/tpope-vim-abolish'

		Plug 'metakirby5/codi.vim'

		Plug 'rickhowe/diffchar.vim'

		" Vimscript test suite
		Plug 'junegunn/vader.vim'

		"
		" Convenience
		"

		" Open files in last place
		Plug 'farmergreg/vim-lastplace'

		" Snippet engine
		Plug 'SirVer/ultisnips'

		" Emmet
		Plug 'mattn/emmet-vim'

		" Linting
		Plug 'w0rp/ale'

		Plug 'tpope/vim-ragtag'

		" Plug 'Valloric/YouCompleteMe', { 'do': 'python install.py --js-completer --clang-completer' }
		if has('nvim')
			Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
		else
			Plug 'Shougo/deoplete.nvim'
			Plug 'roxma/nvim-yarp'
			Plug 'roxma/vim-hug-neovim-rpc'
		endif

		" Switch between single line and multi line statemnts
		Plug 'AndrewRadev/splitjoin.vim'

		" Spelling and grammar checking
		Plug 'rhysd/vim-grammarous'

		Plug 'airblade/vim-accent'

		"
		" Inconvinience
		"

		Plug 'takac/vim-hardtime'

		"
		" Appearance
		"

		" Status bar
		Plug 'vim-airline/vim-airline'

		" Colourscheme
		Plug 'Iambecomeroot/wal.vim'

		" File icons
		Plug 'ryanoasis/vim-devicons'

		" Indent guides
		Plug 'Yggdroot/indentLine'

		" Automatically remove search highlighting
		Plug 'haya14busa/incsearch.vim'

		Plug 'chrisbra/Colorizer'

		" Colour manipulation
		Plug 'romgrk/lib.kom'

		" Syntax plugins
		Plug 'pangloss/vim-javascript'
		Plug 'Galooshi/vim-import-js'

		Plug 'mxw/vim-jsx'
		Plug 'mustache/vim-mustache-handlebars'
		Plug 'digitaltoad/vim-pug'
		Plug 'elzr/vim-json'
		Plug 'plasticboy/vim-markdown'
		Plug 'heavenshell/vim-jsdoc'
		Plug 'lervag/vimtex'
		" Plug 'python-mode/python-mode', { 'branch': 'develop' }
		Plug 'statico/vim-javascript-sql'
		Plug 'Vimjas/vim-python-pep8-indent'
		" Plug 'hdima/python-syntax'
		" Plug 'Rykka/riv.vim'
		" Plug 'nvie/vim-flake8'
		Plug 'Matt-Deacalion/vim-systemd-syntax'

	call plug#end()
endif

let g:riv_python_rst_hl=1


"
" General settings
"

" Use space as leader
let mapleader = " "

" Scroll with mousewheel
set mouse=a

filetype plugin indent on

" Use global swap file
" Then use `vim -L` for list of open files
if !isdirectory($HOME . "/.vim/swap")
	call mkdir($HOME . "/.vim/swap", "p")
endif
set directory=~/.vim/swap

" Maintain undo history between sessions
if !isdirectory($HOME . "/.vim/undodir")
	call mkdir($HOME . "/.vim/undodir", "p")
endif
set undofile
set undodir=~/.vim/undodir

" Open new splits on right
set splitright


"
" Appearance
"

set fileformats=unix

" Syntax highlighting
syntax on

" Start scrolling 10 lines before the horizontal window border
set scrolloff=10

" Break on words not on characters
set formatoptions=l
set linebreak

" Show (certain) invisibles
set list
set listchars=trail:·,tab:\│\ ,

" Indentation
set tabstop=2 softtabstop=2 shiftwidth=2 smarttab
set autoindent
set copyindent
set preserveindent

" Indent with tabs, align with spaces
" I am agaisnt lining up code as this creates unecessary changes when diffing,
" but it is needed for comment blocks with a single leading space
" set cindent
" set cinoptions=(0,u0,U0
set cinoptions=l1

autocmd Filetype python setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab

" Line numbers
set number
set relativenumber

" Encoding and font
set encoding=utf-8
set guifont=Source\ Code\ Pro\ 12

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

let g:vim_markdown_conceal = 0

" Show trailing whitespace
match Todo /\s\+$/

" No folding
set nofoldenable

" Highlight characters that go over line length limit
augroup vimrc_autocmds
	" autocmd BufEnter *.js highlight OverLength ctermbg=grey
	" autocmd BufEnter *.js match OverLength /\%82v.*/
augroup END


"
" Navigation
"

" Quick pane cycling
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


"
" Search
"

" Highlight results
set hlsearch

" Automatically hide results
let g:incsearch#auto_nohlsearch = 1
map /	<Plug>(incsearch-forward)
map ?	<Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n	<Plug>(incsearch-nohl-n)
map N	<Plug>(incsearch-nohl-N)
map *	<Plug>(incsearch-nohl-*)
map #	<Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Underline search results
let g:incsearch#highlight = {
\	 'match' : {
\		 'group' : 'IncSearchUnderline',
\		 'priority' : '10'
\	 },
\	 'on_cursor' : {
\		 'priority' : '100'
\	 },
\	 'cursor' : {
\		 'group' : 'Search',
\		 'priority' : '1000'
\	 }
\ }

" Prefer case sensitive matches but allow both
set ignorecase
set smartcase
nnoremap <leader>/ :nohl<CR>


"
" Buffers
"

" Allow buffers in background
set hidden

" Go to nth buffer
let c = 1
while c <= 999
	execute "nnoremap " . c . "<leader> :" . c . "b\<CR>"
	let c += 1
endwhile

" Shortcut to close only current buffer
nnoremap <leader>q :bn<CR>:bd #<CR>

" Automatically update files
set autoread

" Disable syntax highlighting for large files
autocmd BufWinEnter * if line2byte(line("$") + 1) > 1000000 | syntax clear | endif

" `:e`, but relative to current file
map ,e :e <C-R>=expand("%:p:h") . "/" <CR>


"
" Typing
"

function! RepeatChar(char, count)
	return repeat(a:char, a:count)
endfunction

" Empty line but don't delete it
nnoremap <leader>dd 0D

nnoremap s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
nnoremap S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>

" Continue comments on next line when max length is reached
set textwidth=79
set formatoptions+=c


"
" Spelling
"

augroup spelling
	autocmd FileType markdown,gitcommit setlocal spell
augroup END

" Autocomplete words when spell is set
set complete+=kspell

iabbrev PropTYpes PropTypes
iabbrev propTYpes propTypes
iabbrev THey They
iabbrev withSTyles withStyles
iabbrev THis This
iabbrev funx func
iabbrev COmponent Component
iabbrev retrun return


""""""""""""""""""""""
"	Plugins settings	"
""""""""""""""""""""""

"
" Ale
"

nmap <silent> <leader>k <Plug>(ale_previous_wrap)
nmap <silent> <leader>j <Plug>(ale_next_wrap)


let g:pymode_python = 'python3'

" nnoremap <leader>f :ALEFix<CR>


"
" deoplete
"

let g:deoplete#enable_at_startup = 1


"
" Filetype
"

let g:javascript_plugin_jsdoc = 1

" Supposed to make leaving insert mode faster
set ttimeoutlen=50

" Always show status line
set laststatus=2

" Hide default status bar
set shortmess+=F


"
" NERDTree
"

" Keybinding to open NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>

nnoremap <silent> <Leader>f :NERDTreeFind<CR>


"
" Git
"

" Delete fugitive buffers after close
augroup fugitive_close
	autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

set previewheight=12
augroup previewheight
	autocmd BufEnter ?* call PreviewHeightWorkAround()
	function! PreviewHeightWorkAround()
		if &previewwindow
			exec 'setlocal winheight='.&previewheight
			exec 'resize '.&previewheight
		endif
	endfunction
augroup END

let g:fugitive_gitlab_domains = ['https://gitlab.robitaille.host']
let g:fugitive_gitlab_ssh_user = 'gitlab'

" Keybindings for fugitive
nnoremap <leader>s :Gstatus<CR>
nnoremap <leader>c :Gcommit<CR>
nnoremap <leader>df :Gdiff<CR>


"
" Git gutter
"

let g:gitgutter_sign_added='┃'
let g:gitgutter_sign_modified='┃'
let g:gitgutter_sign_removed='◢'
let g:gitgutter_sign_removed_first_line='◥'
let g:gitgutter_sign_modified_removed='◢'


"
" FZF
"

nnoremap <C-p> :FZF<CR>


"
" Snippets
"

let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsSnippetsDir = '~/.vim/snippets'

let g:SuperTabDefaultCompletionType = '<C-n>'


"
" Wal
"

" Colourscheme settings
silent! colorscheme wal


"
" Indent line
"

" Don't remove quotes from json
let g:vim_json_syntax_conceal = 0

" Don't conceal so much in markdown
let g:indentLine_conceallevel = 1

" Show markdown backticks
call matchadd('Conceal', '`', 10, -1, {'conceal': '`'})

" Enable leading spaces
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'

" Exclude NERDTree
let g:indentLine_bufNameExclude = ['_.*', 'NERD_tree.*']


"
" Emmet
"

let g:user_emmet_expandabbr_key = "<s-tab>"


"
" Commentary
"

let g:NERDSpaceDelims = 1

nmap <C-_> <Plug>CommentaryLine
vmap <C-_> <Plug>Commentary

" Insert current comment leader replacing %s
imap <C-_> <C-r>=substitute(&commentstring, '%s', '', '')<CR>

" Set comment strings
autocmd FileType vb setlocal commentstring=\'\ %s
autocmd FileType vim setlocal commentstring=\"\ %s
autocmd FileType zsh setlocal commentstring=#\ %s
autocmd FileType cpp setlocal commentstring=\/\/\ %s
autocmd FileType matlab setlocal commentstring=%\ %s
autocmd FileType python setlocal commentstring=#\ %s
autocmd FileType dosbatch setlocal commentstring=rem\ %s

let g:tex_conceal = ""
nnoremap <leader>t <Plug>vimtex-compile

let g:grammarous#languagetool_cmd = '/usr/bin/languagetool'
let g:grammarous#use_vim_spelllang = 1

let g:grammarous#disabled_rules = {
	\ 'tex' : ['FR_SPELLING_RULE', 'FRENCH_WHITESPACE'],
	\ }

let g:pymode_options_colorcolumn = 0
let g:pymode_folding = 0

function! CompletionChain(findstart, base)
	if a:findstart
		" Test against the functions one by one
		for func in g:user_completion_chain
			let pos = call(func, [a:findstart, a:base])
			" If a function can complete the prefix,
			" remember the name and return the result from the function
			if pos >= 0
				let s:current_completion = func
				return pos
			endif
		endfor

		" No completion can be done
		unlet! s:current_completion
		return -1
	elseif exists('s:current_completion')
		" Simply pass the arguments to the selected function
		return call(s:current_completion, [a:findstart, a:base])
	else
		return []
	endif
endfunction

let g:ycm_show_diagnostics_ui = 0
let g:user_completion_chain = ['accent#AccentCompletion', 'youcompleteme#Complete']
set completefunc=CompletionChain

nnoremap <leader>- color#Test(expand('<cword>'))
						\? '"_ciw' . color#Darken(expand('<cword>')) . "\<Esc>"
						\: "\<Nop>"
nnoremap <M-=> color#Test(expand('<cword>'))
						\? '"_ciw' . color#Lighten(expand('<cword>')) . "\<Esc>"
						\: "\<Nop>"
function! GetVisual()
	try
		let v_save = @v
		normal! gv"vy
		return @v
	finally
		let @v = v_save
	endtry
endfunction

function! CenterSelection()
	let v = GetVisual()
	"let l = getline('.')
	let lre = '^\zs\s*\ze\S'
	let rre = '\s*$'
	let sp= matchstr(v,lre)
	let sp .= matchstr(v,rre)
	let ln=len(sp)
	let v = substitute(v,lre,sp[:ln/2-1],'')
	let v = substitute(v,rre,sp[ln/2:],'')
	let ve_save = &virtualedit
	let v_save = @v
	let &virtualedit = 'all'
	call setreg('v', v,visualmode())
	normal! gvx"vP
	let @v = v_save
	let &virtualedit = ve_save
endfunction

set conceallevel=0
