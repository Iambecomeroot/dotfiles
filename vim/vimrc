let s:xdg_config_home = len($XDG_CONFIG_HOME) == 0
\ ? $HOME . '/.config'
\ : $XDG_CONFIG_HOME
let s:vim_config_dir = has('nvim')
\ ? s:xdg_config_home . '/nvim/'
\ : $HOME . '/.vim/'

" TODO: Add mnemonics for mappings (or at least make everything consistent)


" TODO: Move
for f in split(glob('$HOME/.config/nvim/templated/*.vim'), '\n')
	execute 'source' f
endfor


"
" Plugins
"

if filereadable(s:vim_config_dir . 'autoload/plug.vim')
	call plug#begin(s:vim_config_dir . 'plugged')

		"
		" Additional functionality
		"

		" Database wrapper
		Plug 'tpope/vim-dadbod'
		Plug 'tpope/vim-dotenv'
		Plug 'tpope/vim-commentary'
		" Working with XML like tags
		Plug 'tpope/vim-ragtag'
		" Helpers for UNIX (delete, rename)
		Plug 'tpope/vim-eunuch'

		" tags file management
		Plug 'ludovicchabant/vim-gutentags'

		" Add more targets
		Plug 'wellle/targets.vim'

		" Tree view
		Plug 'scrooloose/nerdtree', { 'on': [ 'NERDTree', 'NERDTreeToggle', 'NERDTreeFind' ] }

		" Better history
		Plug 'mbbill/undotree'

		" Fuzzy file finder
		Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
		Plug 'junegunn/fzf.vim'

		" Multi-file search
		Plug 'wincent/ferret'

		" Enable dot repetition for plugins
		Plug 'tpope/vim-repeat'

		" Surround blocks with characters
		Plug 'tpope/vim-surround'

		" Pairs of handy pairs mappings
		" Good for moving lines and such
		Plug 'tpope/vim-unimpaired'

		Plug 'andymass/vim-matchup'

		" Copy text from anywhere
		Plug 'ojroques/vim-oscyank'

		Plug 'AndrewRadev/sideways.vim'
		Plug 'tommcdo/vim-exchange'

		Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }

		"
		" Git
		"

		Plug 'tpope/vim-fugitive'
		" Figutive extension for GitHub
		Plug 'tpope/vim-rhubarb'
		" Figutive extension for GitLab
		Plug 'shumphrey/fugitive-gitlab.vim'

		" Show git diff in gutter
		Plug 'airblade/vim-gitgutter'

		" Save session
		Plug 'tpope/vim-obsession'

		" Compare when vim finds a swap file
		Plug 'chrisbra/Recover.vim'

		" Word and case variants
		Plug 'tpope/tpope-vim-abolish'

		Plug 'metakirby5/codi.vim'

		Plug 'rickhowe/diffchar.vim'

		" Vimscript test suite
		Plug 'junegunn/vader.vim'

		"
		" Convenience
		"

		" Open files in last place
		Plug 'farmergreg/vim-lastplace'

		" Snippet engine
		Plug 'SirVer/ultisnips'

		" Emmet
		Plug 'mattn/emmet-vim'

		" Linting
		Plug 'w0rp/ale'

		Plug 'tpope/vim-ragtag'

		Plug 'neoclide/coc.nvim', { 'branch': 'release' }

		" Switch between single line and multi line statemnts
		Plug 'AndrewRadev/splitjoin.vim'

		" Spelling and grammar checking
		Plug 'rhysd/vim-grammarous'

		Plug 'airblade/vim-accent'

		"
		" Inconvinience
		"

		Plug 'takac/vim-hardtime'

		"
		" Appearance
		"

		" Status bar
		Plug 'vim-airline/vim-airline'

		" Colourscheme
		Plug 'Iambecomeroot/wal.vim'

		" File icons
		Plug 'ryanoasis/vim-devicons'

		" Automatically remove search highlighting
		Plug 'haya14busa/incsearch.vim'

		Plug 'nelstrom/vim-visual-star-search'

		Plug 'chrisbra/Colorizer'

		" Colour manipulation
		Plug 'romgrk/lib.kom'

		" Syntax plugins
		Plug 'pangloss/vim-javascript'
		Plug 'Galooshi/vim-import-js'

		Plug 'mxw/vim-jsx'
		Plug 'mustache/vim-mustache-handlebars'
		Plug 'digitaltoad/vim-pug'
		Plug 'sophacles/vim-bundle-mako'
		Plug 'elzr/vim-json'
		Plug 'plasticboy/vim-markdown'
		Plug 'heavenshell/vim-jsdoc'
		Plug 'lervag/vimtex', { 'for': 'tex' }
		" Plug 'python-mode/python-mode', { 'branch': 'develop' }
		Plug 'statico/vim-javascript-sql'
		Plug 'Vimjas/vim-python-pep8-indent'
		Plug 'jpalardy/vim-slime'
		Plug 'hanschen/vim-ipython-cell', { 'for': 'python' }
		" Plug 'hdima/python-syntax'
		" Plug 'Rykka/riv.vim'
		" Plug 'nvie/vim-flake8'
		Plug 'Matt-Deacalion/vim-systemd-syntax', { 'for': 'systemd' }
		Plug 'junegunn/goyo.vim', { 'for': 'markdown' }
		Plug 'shohei/vim-eagle-ulp'
		Plug 'rust-lang/rust.vim'
		Plug 'cespare/vim-toml'

		Plug 'nikvdp/ejs-syntax'

	call plug#end()
endif

let g:riv_python_rst_hl=1


"
" General settings
"

" Use space as leader
let mapleader = " "

" Scroll with mousewheel
set mouse=a

filetype plugin indent on

" Use global swap file
" Then use `vim -L` for list of open files
let s:vim_swap_dir = s:vim_config_dir . 'swap//'
if !isdirectory(s:vim_swap_dir)
	call mkdir(s:vim_swap_dir, "p")
endif
execute "set directory=" . s:vim_swap_dir

" Maintain undo history between sessions
let s:vim_undo_dir = s:vim_config_dir . 'undodir'
if !isdirectory(s:vim_undo_dir)
	call mkdir(s:vim_undo_dir, "p")
endif
set undofile
execute "set undodir=" . s:vim_undo_dir

" Open new splits on right
set splitright


"
" Appearance
"

set fileformats=unix

" Syntax highlighting
syntax on

" Start scrolling 10 lines before the horizontal window border
set scrolloff=10

" Break on words not on characters
set formatoptions=l
set linebreak

" Invisibles setup
set list
set listchars=space:·,tab:\│\ ,

" Hacky way to make spaces visible only as indentation
" Make invisibles black by default,
" and add new highlight group to show leading and trailing spaces and tabs
" God I wish everyone would just use tabs for indentation
" I can't use indentline because it messes with conceals and I don't like that
augroup invisibles
	autocmd ColorScheme * call SetHighlight('hi NonText ctermbg=NONE ctermfg=0 cterm=NONE')
	autocmd ColorScheme * call SetHighlight('hi VisibleWhiteSpace ctermbg=NONE ctermfg=7')
	autocmd ColorScheme,WinEnter * match VisibleWhiteSpace /\(^\(\t\|\ \)\+\|\ \+$\)/
augroup END

" Indentation
set tabstop=2 softtabstop=2 shiftwidth=2 smarttab
set autoindent
set copyindent
set preserveindent

" Indent with tabs, align with spaces
" I am against lining up code as this creates unnecessary changes when diffing,
" but it is needed for comment blocks with a single leading space
" set cindent
" set cinoptions=(0,u0,U0
set cinoptions=l1

autocmd Filetype python setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab

" Line numbers
set number
set relativenumber

" Encoding and font
set encoding=utf-8
set guifont=monospace

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

let g:vim_markdown_conceal = 0

" Show trailing whitespace
match Todo /\s\+$/

" No folding
set nofoldenable


"
" Buffers
"

" Allow buffers in background
set hidden

" Automatically update files
set autoread

" Disable syntax highlighting for large files
autocmd BufWinEnter * if line2byte(line("$") + 1) > 1000000 | syntax clear | endif

function! RepeatChar(char, count)
	return repeat(a:char, a:count)
endfunction


nnoremap s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
nnoremap S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>

augroup textwidth_autogroup
	autocmd FileType markdown setlocal textwidth=0
augroup END

if executable('par')
	set equalprg=par
endif
set formatoptions+=c


"
" Spelling
"

augroup spelling
	autocmd FileType markdown,gitcommit setlocal spell
	autocmd FileType gitcommit setlocal spelllang=en
augroup END

" Autocomplete words when spell is set
set complete+=kspell

let g:javascript_plugin_jsdoc = 1
" Supposed to make leaving insert mode faster
set ttimeoutlen=50

" Always show status line
set laststatus=2

" Hide default status bar
set shortmess+=F

" Colourscheme settings
silent! colorscheme wal

let g:NERDSpaceDelims = 1

set conceallevel=0


"
" Project-specific settings
"

" Use French language in PFE report
autocmd BufEnter */rapport-final/**/* set spell spelllang=fr spellfile=fr.utf-8.add

" Use Italian language and spellfile for Italian notes
autocmd BufEnter /home/marcel/Nextcloud/Italian/**/* set spell spelllang=it spellfile=it.utf-8.add

" Set wrap in vimdiff
autocmd FilterWritePre * if &diff | setlocal wrap< | endif


function! OpenURLUnderCursor()
	let s:uri = expand('<cWORD>')
	let s:uri = substitute(s:uri, '?', '\\?', '')
	let s:uri = shellescape(s:uri, 1)
	if s:uri != ''
		silent exec "!xdg-open '".s:uri."'"
		:redraw!
	endif
endfunction
nnoremap gx :call OpenURLUnderCursor()<CR>

let g:python3_host_prog = '/usr/bin/python'

let g:vimsyn_embed = 'lPr'

set inccommand=split

augroup marcel_text_yank_post
	autocmd!

	if exists('##TextYankPost')
		autocmd TextYankPost * lua vim.highlight.on_yank { higroup='Substitute', timeout=200 }
	endif
augroup END

" Continue comments on next line when max length is reached
set textwidth=79

function! SetColorColumn()
	if exists('+colorcolumn')
		" Highlight up to 255 columns (this is the current Vim max) beyond 'textwidth'
		let &l:colorcolumn='+' . join(range(1, 254), ',+')
	endif
endfunction

augroup marcel_colorcolumn
	autocmd!
	autocmd BufReadPost,BufNew,ColorScheme,WinEnter * call SetColorColumn()
augroup END

augroup marcel_formatprg
	autocmd!
	autocmd FileType json let &formatprg="jq ."
augroup END
